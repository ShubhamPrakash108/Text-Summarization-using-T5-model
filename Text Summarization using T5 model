{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":6004344,"sourceType":"datasetVersion","datasetId":3438844}],"dockerImageVersionId":30787,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/shubham2prakash/text-summarization-using-t5-model?scriptVersionId=209392720\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2024-11-24T17:23:55.700798Z","iopub.execute_input":"2024-11-24T17:23:55.701145Z","iopub.status.idle":"2024-11-24T17:23:56.057207Z","shell.execute_reply.started":"2024-11-24T17:23:55.701104Z","shell.execute_reply":"2024-11-24T17:23:56.056368Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"train_data = pd.read_csv(\"/kaggle/input/samsum-dataset-text-summarization/samsum-train.csv\")\ntrain_data.drop('id',axis=1,inplace=True)\ntrain_data.head(5)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-24T17:23:56.058744Z","iopub.execute_input":"2024-11-24T17:23:56.059084Z","iopub.status.idle":"2024-11-24T17:23:56.334561Z","shell.execute_reply.started":"2024-11-24T17:23:56.059057Z","shell.execute_reply":"2024-11-24T17:23:56.333672Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"test_data = pd.read_csv(\"/kaggle/input/samsum-dataset-text-summarization/samsum-test.csv\")\ntest_data.drop('id',axis=1,inplace=True)\ntest_data.head(5)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-24T17:23:56.335533Z","iopub.execute_input":"2024-11-24T17:23:56.335782Z","iopub.status.idle":"2024-11-24T17:23:56.36348Z","shell.execute_reply.started":"2024-11-24T17:23:56.335756Z","shell.execute_reply":"2024-11-24T17:23:56.362753Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"val_data = pd.read_csv(\"/kaggle/input/samsum-dataset-text-summarization/samsum-validation.csv\")\nval_data.drop('id',axis=1,inplace=True)\nval_data.head(5)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-24T17:23:56.364302Z","iopub.execute_input":"2024-11-24T17:23:56.364551Z","iopub.status.idle":"2024-11-24T17:23:56.390256Z","shell.execute_reply.started":"2024-11-24T17:23:56.364528Z","shell.execute_reply":"2024-11-24T17:23:56.389584Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print(f\"The shape of train_data is {train_data.shape}\")\nprint(f\"The shape of train_data is {test_data.shape}\")\nprint(f\"The shape of train_data is {val_data.shape}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-24T17:23:56.391987Z","iopub.execute_input":"2024-11-24T17:23:56.392235Z","iopub.status.idle":"2024-11-24T17:23:56.396694Z","shell.execute_reply.started":"2024-11-24T17:23:56.392201Z","shell.execute_reply":"2024-11-24T17:23:56.395878Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"%%capture\n!pip install transformers[torch]\n!pip install rouge_score","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-24T17:23:56.39782Z","iopub.execute_input":"2024-11-24T17:23:56.398146Z","iopub.status.idle":"2024-11-24T17:24:15.489272Z","shell.execute_reply.started":"2024-11-24T17:23:56.398096Z","shell.execute_reply":"2024-11-24T17:24:15.488282Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from transformers import T5Tokenizer, T5ForConditionalGeneration, Seq2SeqTrainer, Seq2SeqTrainingArguments, DataCollatorForSeq2Seq\nimport numpy as np","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-24T17:24:15.490612Z","iopub.execute_input":"2024-11-24T17:24:15.490902Z","iopub.status.idle":"2024-11-24T17:24:32.808152Z","shell.execute_reply.started":"2024-11-24T17:24:15.490872Z","shell.execute_reply":"2024-11-24T17:24:32.8075Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"checkpoint = 't5-small'\ntokenizer = T5Tokenizer.from_pretrained(checkpoint,legacy=False)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-24T17:24:32.809106Z","iopub.execute_input":"2024-11-24T17:24:32.809644Z","iopub.status.idle":"2024-11-24T17:24:34.077574Z","shell.execute_reply.started":"2024-11-24T17:24:32.809615Z","shell.execute_reply":"2024-11-24T17:24:34.076583Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def preprocess_function(examples):\n    \n    inputs = [\"summarize: \" + (doc if doc is not None else \"\") for doc in examples[\"dialogue\"]]\n    model_inputs = tokenizer(inputs, max_length=512, truncation=True)\n    with tokenizer.as_target_tokenizer():\n        labels = tokenizer(examples[\"summary\"], max_length=150, truncation=True)\n\n    model_inputs[\"labels\"] = labels[\"input_ids\"]\n    return model_inputs\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-24T17:24:34.078768Z","iopub.execute_input":"2024-11-24T17:24:34.079059Z","iopub.status.idle":"2024-11-24T17:24:34.084284Z","shell.execute_reply.started":"2024-11-24T17:24:34.079032Z","shell.execute_reply":"2024-11-24T17:24:34.083282Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from datasets import Dataset\n\ntrain_data = Dataset.from_pandas(train_data)\nval_data = Dataset.from_pandas(val_data)\ntest_data = Dataset.from_pandas(test_data)\n\ntokenized_train = train_data.map(preprocess_function, batched=True)\ntokenized_validation = val_data.map(preprocess_function, batched=True)\ntokenized_test = test_data.map(preprocess_function, batched=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-24T17:24:34.085541Z","iopub.execute_input":"2024-11-24T17:24:34.086296Z","iopub.status.idle":"2024-11-24T17:24:45.147782Z","shell.execute_reply.started":"2024-11-24T17:24:34.086268Z","shell.execute_reply":"2024-11-24T17:24:45.146887Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"model = T5ForConditionalGeneration.from_pretrained(checkpoint)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-24T17:24:45.148847Z","iopub.execute_input":"2024-11-24T17:24:45.149111Z","iopub.status.idle":"2024-11-24T17:24:47.203459Z","shell.execute_reply.started":"2024-11-24T17:24:45.149083Z","shell.execute_reply":"2024-11-24T17:24:47.202659Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"tokenized_train","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-24T17:24:47.204713Z","iopub.execute_input":"2024-11-24T17:24:47.205058Z","iopub.status.idle":"2024-11-24T17:24:47.211145Z","shell.execute_reply.started":"2024-11-24T17:24:47.205019Z","shell.execute_reply":"2024-11-24T17:24:47.210278Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"!pip install evaluate","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-24T17:24:47.212169Z","iopub.execute_input":"2024-11-24T17:24:47.212506Z","iopub.status.idle":"2024-11-24T17:24:55.828371Z","shell.execute_reply.started":"2024-11-24T17:24:47.212478Z","shell.execute_reply":"2024-11-24T17:24:55.827453Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"!pip install evaluate","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-24T17:24:55.832157Z","iopub.execute_input":"2024-11-24T17:24:55.832535Z","iopub.status.idle":"2024-11-24T17:25:04.153469Z","shell.execute_reply.started":"2024-11-24T17:24:55.832504Z","shell.execute_reply":"2024-11-24T17:25:04.152263Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from transformers import T5Tokenizer\nimport numpy as np\nimport evaluate\n\ntokenizer = T5Tokenizer.from_pretrained('t5-small')\nrouge = evaluate.load(\"rouge\")\n\ndef compute_metrics(pred):\n    labels_ids = pred.label_ids\n    pred_ids = pred.predictions\n    pad_token_id = tokenizer.pad_token_id\n    labels_ids[labels_ids == -100] = pad_token_id\n    pred_ids = np.clip(pred_ids, 0, tokenizer.vocab_size - 1).astype(int)\n    pred_str = tokenizer.batch_decode(pred_ids, skip_special_tokens=True)\n    label_str = tokenizer.batch_decode(labels_ids, skip_special_tokens=True)\n    rouge_output = rouge.compute(predictions=pred_str, references=label_str, use_stemmer=True)\n    result = {key: value * 100 for key, value in rouge_output.items()}\n    prediction_lens = [np.count_nonzero(pred != pad_token_id) for pred in pred_ids]\n    result[\"gen_len\"] = np.mean(prediction_lens)\n\n    return result","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-24T17:25:04.15493Z","iopub.execute_input":"2024-11-24T17:25:04.155239Z","iopub.status.idle":"2024-11-24T17:25:06.581609Z","shell.execute_reply.started":"2024-11-24T17:25:04.155207Z","shell.execute_reply":"2024-11-24T17:25:06.580898Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"training_args = Seq2SeqTrainingArguments(\n    output_dir=\"./results\",             \n    eval_strategy=\"epoch\",        \n    learning_rate=2e-5,                 \n    per_device_train_batch_size=16,     \n    per_device_eval_batch_size=16,      \n    weight_decay=0.01,                  \n    save_total_limit=3,                 \n    num_train_epochs=10,                 \n    predict_with_generate=True,         \n    generation_max_length=150,          \n    generation_num_beams=4,            \n    run_name=\"unique_run_name\"\n)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-24T17:25:06.58268Z","iopub.execute_input":"2024-11-24T17:25:06.582954Z","iopub.status.idle":"2024-11-24T17:25:06.660032Z","shell.execute_reply.started":"2024-11-24T17:25:06.582928Z","shell.execute_reply":"2024-11-24T17:25:06.659353Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from transformers import DataCollatorForSeq2Seq\n\ndata_collator = DataCollatorForSeq2Seq(tokenizer=tokenizer, model=model)\n\ntrainer = Seq2SeqTrainer(\n    model=model,                       \n    args=training_args,              \n    train_dataset=tokenized_train,     \n    eval_dataset=tokenized_validation, \n    data_collator=data_collator,       \n    tokenizer=tokenizer,               \n    compute_metrics=compute_metrics,   \n)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-24T17:25:06.661012Z","iopub.execute_input":"2024-11-24T17:25:06.661283Z","iopub.status.idle":"2024-11-24T17:25:07.660887Z","shell.execute_reply.started":"2024-11-24T17:25:06.661256Z","shell.execute_reply":"2024-11-24T17:25:07.659979Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import os\nos.environ[\"WANDB_DISABLED\"] = \"true\"","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-24T17:25:07.662085Z","iopub.execute_input":"2024-11-24T17:25:07.662479Z","iopub.status.idle":"2024-11-24T17:25:07.66693Z","shell.execute_reply.started":"2024-11-24T17:25:07.662442Z","shell.execute_reply":"2024-11-24T17:25:07.666056Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"trainer.train()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-24T17:25:07.667954Z","iopub.execute_input":"2024-11-24T17:25:07.668201Z","iopub.status.idle":"2024-11-24T17:41:28.310063Z","shell.execute_reply.started":"2024-11-24T17:25:07.668177Z","shell.execute_reply":"2024-11-24T17:41:28.309384Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"trainer.evaluate()\n\ntest_results = trainer.evaluate(eval_dataset=tokenized_test)\n\nprint(test_results)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-24T17:41:28.311189Z","iopub.execute_input":"2024-11-24T17:41:28.311473Z","iopub.status.idle":"2024-11-24T17:44:26.852984Z","shell.execute_reply.started":"2024-11-24T17:41:28.311445Z","shell.execute_reply":"2024-11-24T17:44:26.852056Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import torch\nfrom torch.utils.data import Dataset\n\n# Define a custom dataset class for your random texts\nclass CustomTextDataset(Dataset):\n    def __init__(self, texts, tokenizer):\n        self.texts = texts\n        self.tokenizer = tokenizer\n\n    def __len__(self):\n        return len(self.texts)\n\n    def __getitem__(self, idx):\n        # Tokenize the text and return input_ids and attention_mask\n        encoding = self.tokenizer(self.texts[idx], padding='max_length', truncation=True, return_tensors=\"pt\", max_length=512)\n        return {\n            'input_ids': encoding['input_ids'].flatten(),\n            'attention_mask': encoding['attention_mask'].flatten()\n        }\n\n# Define your random text input\nrandom_texts = [\n    \"\"\"Some of the best AI chatbots for coding include:\nGitHub Copilot\nHelps developers write high-quality code more efficiently. It can suggest lines of code, complete functions, write comments, and help with debugging. \nAmazon CodeWhisperer\nProvides real-time code recommendations to improve coding efficiency. It offers features like code suggestions, function completion, documentation generation, and security scanning. \nChatGPT\nA generalized AI chatbot that can generate code samples in many languages. It can also provide detailed explanations and engage in substantive conversations. \nClaude 3.5 Sonnet\nAnthropic's Claude AI chatbot is considered ideal for programming. It can handle uploaded files, process more words than the free version of ChatGPT, and access websites. \nCodacy\nUses automated tools to improve code quality and security. It also has code review features to promote collaboration and learning. \nCodeium\nA free solution that includes an AI chatbot, intelligent autocomplete, and context-aware code generation. \nOther AI coding assistants include: Tabnine and MutableAI.\"\"\"\n    \n]\n\n# Create a dataset from the random texts\ntest_dataset = CustomTextDataset(random_texts, tokenizer)\n\n# Use the trainer to predict\npredictions = trainer.predict(test_dataset)\n\n# Decode predictions to readable text\ndecoded_predictions = tokenizer.batch_decode(predictions.predictions, skip_special_tokens=True)\n\n# Print the generated outputs\nfor i, text in enumerate(random_texts):\n    print(f\"Input: {text}\\nGenerated Output: {decoded_predictions[i]}\\n\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-24T17:59:59.297839Z","iopub.execute_input":"2024-11-24T17:59:59.298563Z","iopub.status.idle":"2024-11-24T18:00:00.184734Z","shell.execute_reply.started":"2024-11-24T17:59:59.298527Z","shell.execute_reply":"2024-11-24T18:00:00.183922Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"test_data","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}